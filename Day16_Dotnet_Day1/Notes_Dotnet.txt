1) What is .NET

	Microsoft introduced .NET for bridging the gap between interoperability between applications. 

It is a foundation on which where we can 

		Build

		Design
	
		Develop

		Deploy 

the applications. 



2) What is .NET Framework

	.NET framework contains more than 300+ langauge characterstics have been
formed as a single group, where we can use one language features within another 
language. 

     Namespaces  : Contains classes and interfaces that which belongs to 
one common group. If you want to overcome the naming conflicts between 
classes then we need the help of namespaces. 


3) .NET Architecture (components)

CLR (Common Language @ Runtime)

	which is responsible for 

		-> Debugging

		-> Exception Handling

		-> Security

		-> Version Support

MSIL (Microsoft Intermediate Language) :
	
	When you compile any .NET application, at first instead of converting into
	CPU specific code, first its converted into MSIL. Then it becomes language
	neutral, as it can be called from any .NET framework programming langauges. 

CLS (Common Language Specification) 

	The code which is there in one .NET framework language, can be used in 
	another .NET framework langauge, known as language interoperability.

CTS (Common Type System)

	All .NET framework languages needs to undergone one common state w.r.t.
	data types and ranges. Ex : if integer takes 4 bytes in C#, asp.net 
		integer needs to take 4 bytes and vb.net integer needs to take
	4 bytes. 	

4) Compiling and Execution Procedure of .NET framework


	-> When you compile any .NET application, at first instead of converting
into CPU specific code, first its converted into MSIL.

		either exe or dll file will be created (based on template) 

	-> Then it would be send to class loader.

		There are 2 types of class loaders known as 

		  (a) Primordial class loader

			Used to load all system classes which are required to run
		the program.

		  (b) Class Loader Objects 

			Used to load all custom classes which are required to run
		the program. 

	-> In Class Loader, JIT compiler will be there converts MSIL into 
		CPU specific code. 

	-> Then it would be send to execution manager, which contains queue of 
		programs which are ready to run, where we can execute the program. 

	*** Before execution, it needs to undergone security authentication ***


Object Oriented Program :
_________________________

it is an approach that provides a way of modularizing programming, that which 
can be used to create small partition memory area for both data and objects, 
which are to be used as templates for creating copies of such modules on demand. 

Object : 

An object is a real world entity, that which possess 3 characterstics known as

	(i) State

	(ii) Behaviour

	(iii) Identity 


OOPS features : 
_________________


	(i) Encapsulation : Wrapping up of data and functions into a single unit
		known as Encapsulation. 

	(ii) Abstraction : Hiding the irrelevant details of an object, that do not
		contribute to its essential characterstics known as abstraction.

	   *** Encapsulation focuses on showing the relevant details, where abstraction
		focuses on hiding the irrelevant details ***

	(iii) Inheritance : Deriving a new entity from already existing entity known
		as inheritance. Through inheritance, we can reduce the size of
		the program. 

	(iv) Polymorphism : The ability to take more than one form known as polymorphism.

class : A class is a template or blueprint, that which contains combination of
data members and member functions. Members of the class can be accessable by using
instance of the class. 

class class_name
{
    data members;
    member functions;
}

Output Statement : 
__________________


Console.WriteLine() : used to display any value or message. 

Console.WriteLine("Welcome to C#");



Console.ReadLine() : used to read data from the keyboard. 

Data Types :  
____________

There are 2 types of data types as 

	(i) value types

	(ii) reference types 

*** value types will be stored in STACK memory, and reference types will be stored in HEAP memory ***

Access Modifiers : 
__________________


1) private : Allows you to access members within current class. 

2) public  : Allows you to access members in entire application.

3) protected : Allows you to access members within current/derived class.

4) internal : Allows you to access members within all classes of current namespace.

5) protected internal : Allows you to access members within all classes of current 
	namespace and other namespace derived classes. 


You can define Main() method as 

static void Main()
{

}

You can create an object to the class, as 

class_name obj = new class_name();


"12"

12

Console.ReadLine() by default it takes data in string format, you need to convert to integer, then 

Convert.ToInt32()

Control Structures : 
_____________________

Used to define the flow of the program. 

There are 2 types of control structures known as

	(i) Branching

	if...else : Executes the statements based on the condition. 

		if (condition) {
			statement(s);
		} else {
			statement(s);
		}

	switch...case : Used to define menu-driven programs. 

	switch(expr)
	{
		case 1 :
			statement(s);
			break;
		case 2 : 
			statement(s);
			break;
		case 3 : 
			statement(s);
			break;
		...
		...
		...
		...
		default : 
			statement(s);
			break;
	}



	(ii) Looping 

	while loop : 

		This loop executes all the statement(s) repeatedly until the 
	condition remains true, if the condition remains false, then it comes
	out of the loop.  For every loop, basically there are 3 phases as

		(i) Initialization

		(ii) Condition

		(iii) Increment/Decrement 

	Initialization performed at the beginning of the loop.

	Condition performed at the conditional part of the loop.

	Increment/Decrement performed before closing the loop.

	while(condition) {
	   statement(s);
	}

for loop : Executes the statements repeatedly until the condition remains true.

for(initialization;condition;increment/decrement) {
...
...
...
}

Arrays : An array is the finite ordered set of homogeneous elements, means all the elements belongs to 
same data type. All the elements of array are stored in successive memory locations. 

int[] a=new int[]{12,4,66,23,52};

a[0]=12;
a[1]=4;
a[2]=66;
a[3]=23;
a[4]=52;

            int[] a = new int[] { 12, 5, 33, 23, 95 };

            foreach(int i in a)
            {
                Console.WriteLine(i);
            }


	    











































